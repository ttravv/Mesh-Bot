from aiogram import types, Router, F
from tg_bot.handlers.keyboards import create_keyboard, create_options_keyboard
from tg_bot.global_state import (
    set_user_token,
    remove_user_token,
    set_user_notification,
    remove_user_notification,
    get_user_tokens,
    get_user_notifications,
)
import logging
import base64

router = Router()


def is_valid_jwt(token: str) -> bool:
    parts = token.split(".")
    if len(parts) != 3:
        return False
    for part in parts:
        try:
            base64.b64decode(part + "==")
        except Exception:
            return False
    return True


@router.message(F.text)
async def process_token(message: types.Message):
    token = message.text.strip()
    chat_id = message.from_user.id
    user_tokens = get_user_tokens()

    if chat_id in user_tokens and is_valid_jwt(token):
        await message.answer(
            "üö´ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω', –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω."
        )
        return

    if not is_valid_jwt(token):
        await message.answer(
            "üö´ –¢–æ–∫–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å."
        )
        return

    else:
        set_user_token(chat_id, token)

    keyboard = create_options_keyboard()

    user_notifications = get_user_notifications()
    if chat_id in user_notifications:
        try:
            await message.bot.delete_message(chat_id, user_notifications[chat_id])
        except Exception:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        finally:
            remove_user_notification(chat_id)

    try:
        await message.delete()
    except Exception:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º.")

    await message.answer(
        "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∏ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–∞–ª—å—à–µ.",
        reply_markup=keyboard,
        parse_mode="HTML",
    )


@router.callback_query(F.data == "refresh_token")
async def refresh_token(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    user_notifications = get_user_notifications()

    if chat_id in user_notifications:
        try:
            await callback_query.bot.delete_message(
                chat_id, user_notifications[chat_id]
            )
        except Exception:
            logging.error(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞."
            )
        finally:
            remove_user_notification(chat_id)

    remove_user_token(chat_id)

    try:
        request_message = await callback_query.message.answer(
            "üîÑ –ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ."
        )

        keyboard = create_keyboard()
        token_message = await callback_query.message.answer(
            "üë§ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É:", reply_markup=keyboard
        )

        set_user_notification(
            chat_id, (request_message.message_id, token_message.message_id)
        )
    except Exception:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞.")

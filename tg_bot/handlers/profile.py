from dnevniklib.student.student import Student
from aiogram import types, Router, F
from dnevniklib.errors.token import DnevnikTokenError
from tg_bot.global_state import (
    get_user_tokens,
    remove_user_token
)
import logging

router = Router()

@router.callback_query(F.data == "profile")
async def process_profile(callback_query: types.CallbackQuery):
    chat_id = callback_query.from_user.id
    user_tokens = get_user_tokens()  
    token = user_tokens.get(chat_id)

    if not token:
        await callback_query.message.answer(
            "üö´ –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞."
        )
        return

    try:
        student = Student(token)
        profile_info = (
            f"<b>üë§ –ò–º—è:</b> {student.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>üë• –§–∞–º–∏–ª–∏—è:</b> {student.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>üÜî –û—Ç—á–µ—Å—Ç–≤–æ:</b> {student.middle_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {student.birthdate or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>üìß Email:</b> {student.email or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>üéì –í–æ–∑—Ä–∞—Å—Ç:</b> {student.age or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>üöª –ü–æ–ª:</b> {'–ú—É–∂—Å–∫–æ–π' if student.sex == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
            f"<b>üè´ –ö–ª–∞—Å—Å:</b> {student.class_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>üìö ID —Å—Ç—É–¥–µ–Ω—Ç–∞:</b> {student.id or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>üè¢ ID —à–∫–æ–ª—ã:</b> {student.school_id or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"<b>üîë –õ–æ–≥–∏–Ω:</b> {student.login or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
        )
        await callback_query.message.answer(profile_info, parse_mode="HTML")
    except DnevnikTokenError:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
        remove_user_token(chat_id) 
        await callback_query.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω."
        )
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞.")
        await callback_query.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞."
        )
